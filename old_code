  # Here's the code to get the next target,
  # executed upon submission of target kill code,
  # as it looked within the games_controller
  def getnexttarget
    @game = Game.find(params[:id])
    # This will let me display the plays for each game, in Show view
    @plays = @game.plays.all
    # This is where my code for saving the shuffled targets begins
    
    @play_as_assassin = @game.plays.where('userone_id' => current_user).first
    @play_as_target = @game.plays.where('targetuser_id' => current_user).first

    @current_target = @play_as_assassin.target
    @current_target_play = @game.plays.where('userone_id' => @current_target).first
    @correct_killcode = @current_target_play.useronekillcode

    # Test to see if the submitted targetkillcode matches the useronekill code
    # entered by the target in his/her play
    if @correct_killcode == params["targetkillcode"]
      # Retrieve the new target
      @new_target_id = @current_target_play.target.id
      # For the current user (as assassin) play, replace the current target id
      # with the new target id
      @play_as_assassin.update_attribute(:targetuser_id, @new_target_id)
      # Clear the targetuser_id column for the current (now old) target's play
      @current_target_play.update_attribute(:targetuser_id, nil)
      # Change the "status" column for that old target's play to the number 2,
      # which will signify "assassinated"
      @current_target_play.update_attribute(:useronestatus, 2)
      # Finally, add +1 to the "kills" column for the assassin's play
      # (May need to add this with a migration, still.)
      @play_as_assassin.increment!(:kills)
    end

    # This needs to change depending on success or error...
    # Maybe follow what's under "create" or "update" way down below
    respond_to do |format|
      if @correct_killcode == params["targetkillcode"]
        format.html { redirect_to @game, notice: 'Kill code was correct. Here is your new target.' }
        format.json { head :no_content }
      else
        format.html { redirect_to @game, alert: 'Kill code did not match. Try again.' }
        format.json { render json: @game.errors, status: :unprocessable_entity }
      end
    end

  end


# Here's the old for_for that worked, but with weird validations

<%= simple_form_for(@killcodecheck, url: {controller: "killcodechecks", action: "create"}, html: {method: :post, class: 'form-vertical'}) do |f| %>
  <%= f.error_notification %>
# Here's the code that used a new column in plays to submit the form to
# and then I tried to use the comparison of that to determine whether the 
# other database changes would happen. Problem is the checks would happen
# before the submit of the form entry. Not good.

Here's what was in the play controller:

  def updatetargetkillcode
    # @play = Play.find(params[:id])
    # binding.pry
    @play = current_user.plays.find(params[:id])
    @play.updatetargetkillcode = true

    # This is where my code for reassigning targets begins
    
    @play_as_assassin = Play.where('userone_id' => current_user).first
    @play_as_target = Play.where('targetuser_id' => current_user).first

    @current_target = @play_as_assassin.target
    @current_target_play = Play.where('userone_id' => @current_target).first
    @correct_killcode = @current_target_play.useronekillcode
    @targetkillcode = @play_as_assassin.targetkillcode

    # Test to see if the submitted targetkillcode matches the useronekill code
    # entered by the target in his/her play
    if @targetkillcode == @correct_killcode
      # Retrieve the new target
      @new_target_id = @current_target_play.target.id
      # For the current user (as assassin) play, replace the current target id
      # with the new target id
      @play_as_assassin.update_attribute(:targetuser_id, @new_target_id)
      # Clear the targetuser_id column for the current (now old) target's play
      @current_target_play.update_attribute(:targetuser_id, nil)
      # Change the "status" column for that old target's play to the number 2,
      # which will signify "assassinated"
      @current_target_play.update_attribute(:useronestatus, 2)
      # Finally, add +1 to the "kills" column for the assassin's play
      # (May need to add this with a migration, still.)
      @play_as_assassin.increment!(:kills)
#    elsif @targetkillcode != nil && @correct_killcode != @targetkillcode
    end

    # This needs to change depending on success or error...
    # Maybe follow what's under "create" or "update" way down below

    respond_to do |format|
      if @play.update_attributes(params[:play])
        if @targetkillcode == @correct_killcode
          format.html { redirect_to @play, notice: 'Kill code matched!' }
          format.json { head :no_content }
        else
          ## insert what happens if we save params (i.e.: there's an entry in the
          ## text box), but it's not the right kill code.
          format.html { 
            @play.errors[:targetkillcode] = 'Kill code does not match.'
            render 'edittargetkillcode'  
          }
          format.json { head :no_content }
        end
      else
        format.html { render action: "edittargetkillcode" }
        format.json { render json: @play.errors, status: :unprocessable_entity }
      end
    end
  end

# And here's what was in the "edittargetkillcode" form.

<%= simple_form_for @play, :url => { :action => "updatetargetkillcode" } do |f| %>

  <%= f.error_notification %>
  <%= f.full_error :field, class: "alert alert-error" %>

  <div class="form-inputs">    
    <%= f.input :targetkillcode, label: "Enter your target's kill code"%>
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
  </div>
<% end %>


-----

# Here's the code to get the next target,
# executed upon submission of target kill code,
# as it looked within the games_controller

  def getnexttarget
    @game = Game.find(params[:id])
    # This will let me display the plays for each game, in Show view
    @plays = @game.plays.all
    # This is where my code for saving the shuffled targets begins
    
    @play_as_assassin = @game.plays.where('userone_id' => current_user).first
    @play_as_target = @game.plays.where('targetuser_id' => current_user).first

    @current_target = @play_as_assassin.target
    @current_target_play = @game.plays.where('userone_id' => @current_target).first
    @correct_killcode = @current_target_play.useronekillcode

    # Test to see if the submitted targetkillcode matches the useronekill code
    # entered by the target in his/her play
    if @correct_killcode == params["targetkillcode"]
      # Retrieve the new target
      @new_target_id = @current_target_play.target.id
      # For the current user (as assassin) play, replace the current target id
      # with the new target id
      @play_as_assassin.update_attribute(:targetuser_id, @new_target_id)
      # Clear the targetuser_id column for the current (now old) target's play
      @current_target_play.update_attribute(:targetuser_id, nil)
      # Change the "status" column for that old target's play to the number 2,
      # which will signify "assassinated"
      @current_target_play.update_attribute(:useronestatus, 2)
      # Finally, add +1 to the "kills" column for the assassin's play
      # (May need to add this with a migration, still.)
      @play_as_assassin.increment!(:kills)
    end

    # This needs to change depending on success or error...
    # Maybe follow what's under "create" or "update" way down below
    respond_to do |format|
      if @correct_killcode == params["targetkillcode"]
        format.html { redirect_to @game, notice: 'Kill code was correct. Here is your new target.' }
        format.json { head :no_content }
      else
        format.html { redirect_to @game, alert: 'Kill code did not match. Try again.' }
        format.json { render json: @game.errors, status: :unprocessable_entity }
      end
    end

  end


-------------------------------------

# Here's the old for_for that worked, but with weird validations

<%= simple_form_for(@killcodecheck, url: {controller: "killcodechecks", action: "create"}, html: {method: :post, class: 'form-vertical'}) do |f| %>
  <%= f.error_notification %>


-------------------------------------

# Here's the last form from _new_target_form partial

<%= simple_form_for(@killcodecheck) do |f| %>
  <%= f.error_notification %>

  <p>Enter your target's Kill Code to get your next target:</p>
  <p>Placeholder</p>


  <div class="form-inputs">
    <%= f.hidden_field :game_id, :value => @game.id %>
    <%= f.input :targetkillcode %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, 'Get Next Target' %>
  </div>
<% end %>

-------------------------------------

# Here's the last create action from the killcodecheck controller

  def create
    @killcodecheck = Killcodecheck.new(params[:killcodecheck])

    @game = Game.where('id' => @killcodecheck.game_id).first
#    @game = Game.find(params[:id])
    # This will let me display the plays for each game, in Show view
    @plays = @game.plays.all
    # This is where my code for saving the shuffled targets begins
    
    @play_as_assassin = @game.plays.where('userone_id' => current_user).first
    @play_as_target = @game.plays.where('targetuser_id' => current_user).first

    @current_target = @play_as_assassin.target
    @current_target_play = @game.plays.where('userone_id' => @current_target).first
    @correct_killcode = @current_target_play.useronekillcode

    # Test to see if the submitted targetkillcode matches the useronekill code
    # entered by the target in his/her play
    if @correct_killcode == @killcodecheck.targetkillcode
      # Retrieve the new target
      @new_target_id = @current_target_play.target.id
      # For the current user (as assassin) play, replace the current target id
      # with the new target id
      @play_as_assassin.update_attribute(:targetuser_id, @new_target_id)
      # Clear the targetuser_id column for the current (now old) target's play
      @current_target_play.update_attribute(:targetuser_id, nil)
      # Change the "status" column for that old target's play to the number 2,
      # which will signify "assassinated"
      @current_target_play.update_attribute(:useronestatus, 2)
      # Finally, add +1 to the "kills" column for the assassin's play
      # (May need to add this with a migration, still.)
      @play_as_assassin.increment!(:kills)
    end

    # This needs to change depending on success or error...
    # Maybe follow what's under "create" or "update" way down below
    respond_to do |format|
      if @correct_killcode == @killcodecheck.targetkillcode
        format.html { redirect_to @game, notice: 'Kill code was correct. Here is your new target.' }
        format.json { head :no_content }
      else
#        format.html { redirect_to @game, notice: 'Kill code was incorrect. Try again.' }
        format.html { render action: "new" }
        format.json { render json: @killcodecheck.errors, status: :unprocessable_entity }
      end
    end

  end
